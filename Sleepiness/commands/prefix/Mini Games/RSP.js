const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageCollector } = require('discord.js');

const wait = require('node:timers/promises').setTimeout;

module.exports = {
    config: {
        name: "–∫–Ω–±",
        description: "–ú–∏–Ω–∏ –∏–≥—Ä–∞: –∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞",
      },
      permissions: ['SendMessages'],
      owner: false,
    run: async (client, message, args, prefix) => {
        let coutGame = 0, coutWin = 0;
        let hand = [{ txtru: "–∫–∞–º–µ–Ω—å", txt: 'Rock', emoji: '‚úä', index: 0 }, { txtru: "–±—É–º–∞–≥—É", txt: 'Paper', emoji: 'ü§ö', index: 1 }, { txtru: "–Ω–æ–∂–Ω–∏—Ü—ã", txt: 'Scissors', emoji: '‚úåÔ∏è', index: 2 }]; // Defining Moves
        let rpsMsg = await message.reply({
            embeds: [
                new EmbedBuilder() 
                    .setColor('White')
                    .setTitle('–ö–∞–º–µ–Ω—å/–ù–æ–∂–Ω–∏—Ü—ã/–ë—É–º–∞–≥–∞')
                    .setDescription('–í—ã–±–µ—Ä–∏ –∫–∞–∫ —Å—Ö–æ–¥–∏—Ç—å, —è —É–∂–µ –≤—ã–±—Ä–∞–ª —Å–≤–æ–π —Ö–æ–¥ –∏ –Ω–µ –±—É–¥—É –ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å!')
            ]
        }).then(async (rpsMsg) => {
            await rpsMsg.react('‚úä');
            await rpsMsg.react('‚úåÔ∏è');
            await rpsMsg.react('ü§ö');
            await rpsMsg.react('üõë');;

            waitForReaction(rpsMsg);

        });

        async function waitForReaction(msg) {
        msg.awaitReactions({ filter: (reaction, user) => {
            return ['‚úä', 'ü§ö', '‚úåÔ∏è', 'üõë'].includes(reaction.emoji.name) && user.id !== msg.author.id && user.id === message.author.id;
        }, max: 1, time: 120000, errors: ['time'] }).then(async collected => {
                ++ coutGame;
                const botMove = hand[Math.floor(Math.random() * 3)];
                const userMove = collected.first().emoji.name;
                const reaction = collected.first();
                let move;
                if(reaction.emoji.name === 'üõë') {
                    move = 'close'
                } else if(reaction.emoji.name === '‚úä') {
                    move = 'rock'
                } else if(reaction.emoji.name === 'ü§ö') {
                    move = 'paper'

                } else if(reaction.emoji.name === '‚úåÔ∏è') {
                    move = 'scissors'
                }

                if(move == 'close') { 
                    const description = (coutWin % 10 > 1 && coutWin % 10 < 5) ? "—Ä–∞–∑–∞" : "—Ä–∞–∑"
                    return await msg.edit({
                        embeds: [
                            new EmbedBuilder()
                            .setTitle("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")
                            .setDescription(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª ${coutWin} ${description} –∏–∑ ${coutGame - 1} –∏–≥—Ä`)
                            .setColor('Red')
                        ],
                    }).then(async (msg) => {
                        msg.reactions.removeAll()
                    });
                } 

                switch (move) {
                    case 'rock':
                        win = botMove.index == 0 ? 1 : (botMove.index == 1 ? 0 : 2); break;
                    case 'paper':
                        win = botMove.index == 0 ? 2 : (botMove.index == 1 ? 1 : 0); break;
                    case 'scissors':
                        win = botMove.index == 0 ? 0 : (botMove.index == 1 ? 2 : 1); break;
                }
    
                if(win == 2) {
                    ++ coutWin;
                }

                await msg.edit({
                    embeds: [
                        new EmbedBuilder()
                            .setDescription(`–Ø –≤—ã–±—Ä–∞–ª ${botMove.txtru}! ${win == 0 ? '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!' : (win == 1 ? '–£ –Ω–∞—Å –Ω–∏—á—å—è!' : '–¢—ã –≤—ã–∏–≥—Ä–∞–ª!')} (${userMove} ${win == 0 ? '<' : (win == 1 ? '=' : '>')} ${botMove.emoji}) \n–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã –∫–æ–Ω–µ—á–Ω–æ —Ö–æ—á–µ—à—å`)
                            .setColor('White')
                    ]
                });

                reaction.users.remove(reaction.users.cache.filter(user => user.id !== msg.author.id && user.id === message.author.id).first().id)
                waitForReaction(msg);
            });
        }
    }
}