const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

module.exports = {
    name: "–∫–Ω–±",
    description: "–ú–∏–Ω–∏ –∏–≥—Ä–∞: –∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞",
    type: 1,
    options: [
    ],
    permissions: {
        DEFAULT_MEMBER_PERMISSIONS: "SendMessages" 
    },
    timeout: 10000,
    run: async (client, interaction, config, db) => {
        const author = interaction.user.id;

        let hand = [{ txtru: "–∫–∞–º–µ–Ω—å", txt: 'Rock', emoji: '‚úä', index: 0 }, { txtru: "–±—É–º–∞–≥—É", txt: 'Paper', emoji: 'ü§ö', index: 1 }, { txtru: "–Ω–æ–∂–Ω–∏—Ü—ã", txt: 'Scissors', emoji: '‚úåÔ∏è', index: 2 }]; // Defining Moves
        await interaction.deferReply();
        let rpsMsg = await interaction.editReply({
            embeds: [
                new EmbedBuilder() 
                    .setColor('White')
                    .setTitle('–ö–∞–º–µ–Ω—å/–ù–æ–∂–Ω–∏—Ü—ã/–ë—É–º–∞–≥–∞')
                    .setDescription('–í—ã–±–µ—Ä–∏ –∫–∞–∫ —Å—Ö–æ–¥–∏—Ç—å, —è —É–∂–µ –≤—ã–±—Ä–∞–ª —Å–≤–æ–π —Ö–æ–¥ –∏ –Ω–µ –±—É–¥—É –ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å!')
            ],
            components: [
                new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`rps_rock`)
                            .setEmoji("‚úä")
                            .setLabel(" –ö–∞–º–µ–Ω—å")
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setCustomId(`rps_scissors`)
                            .setEmoji("‚úåÔ∏è")
                            .setLabel(" –ù–æ–∂–Ω–∏—Ü—ã")
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setCustomId(`rps_paper`)
                            .setEmoji("ü§ö")
                            .setLabel(" –ë—É–º–∞–≥–∞")
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setCustomId(`rps_close`)
                            .setEmoji("üõë")
                            .setLabel("–°—Ç–æ–ø")
                            .setStyle(ButtonStyle.Danger)
                    )
            ]
        })
        let win = 0; // 0 = Loss; 1 = Tie; 2 = Win
        let userMove;
        let coutWin = 0, coutGame = 0;

        const collector = rpsMsg.createMessageComponentCollector({ componentType: ComponentType.Button, time: 120000 });

        collector.on('collect',  async i => {
            if (i.customId.startsWith('rps')) {
                const botMove = hand[Math.floor(Math.random() * 3)];
            if (!i.isButton()) return; 

            if(author != i.user.id) return await i.reply({
                embeds: [
                    new EmbedBuilder()
                        .setDescription(`–•–µ–π, —ç—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å–≤–æ—é –ø–æ –∫–æ–º–∞–Ω–¥–µ \`/–∫–Ω–±\` ?`)
                ],
                ephemeral: true
            });

            if (i.customId.startsWith('rps')) {
                ++coutGame;
                let move = i.customId.split('_')[1]
                if(move == 'close') {
                    const description = (coutWin % 10 > 1 && coutWin % 10 < 5) ? "—Ä–∞–∑–∞" : "—Ä–∞–∑"
                    return interaction.editReply({
                        embeds: [
                            new EmbedBuilder()
                            .setTitle("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")
                            .setDescription(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª ${coutWin} ${description} –∏–∑ ${coutGame - 1} –∏–≥—Ä`)
                            .setColor('Red')
                        ],
                        components:[]
                    });
                }
                if(move == 'close') {
                    return await i.reply({
                        embeds: [
                            new EmbedBuilder() 
                                .setColor('Red')
                                .setTitle('–ö–∞–º–µ–Ω—å/–ù–æ–∂–Ω–∏—Ü—ã/–ë—É–º–∞–≥–∞')
                                .setDescription('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?')
                        ],
                        components: [
                            new ActionRowBuilder()
                                .addComponents(
                                    new ButtonBuilder()
                                        .setCustomId(`rps_exit`)
                                        .setLabel("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
                                        .setStyle(ButtonStyle.Danger),
                                )
                        ],
                        ephemeral: true
                    })
                    
                    
                }
                else i.deferUpdate()
                switch (move) {
                    case 'rock':
                        userMove = "‚úä";
                        break;
                    case 'paper':
                        userMove = "ü§ö";
                        break;
                    case 'scissors':
                        userMove = "‚úåÔ∏è";
                        break;
                }
                switch (move) { // Calculating if player wins, losses, or a tie
                    case 'rock':
                        win = botMove.index == 0 ? 1 : (botMove.index == 1 ? 0 : 2); break;
                    case 'paper':
                        win = botMove.index == 0 ? 2 : (botMove.index == 1 ? 1 : 0); break;
                    case 'scissors':
                        win = botMove.index == 0 ? 0 : (botMove.index == 1 ? 2 : 1); break;
                }

                if(win == 2)    ++coutWin;

                return interaction.editReply({
                    embeds: [
                        new EmbedBuilder()
                            .setDescription(`–Ø –≤—ã–±—Ä–∞–ª ${botMove.txtru}! ${win == 0 ? '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!' : (win == 1 ? '–£ –Ω–∞—Å –Ω–∏—á—å—è!' : '–¢—ã –≤—ã–∏–≥—Ä–∞–ª!')} (${userMove} ${win == 0 ? '<' : (win == 1 ? '=' : '>')} ${botMove.emoji}) \n–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã –∫–æ–Ω–µ—á–Ω–æ —Ö–æ—á–µ—à—å`)
                            .setColor('White')
                    ]
                });
            }
            }
        });

        collector.on('end', async collected => {
            return await interaction.editReply({
                attachments: [],
                embeds: [
                    new EmbedBuilder()
                    .setTitle("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")
                    .setDescription(`–ú–Ω–µ –Ω–∞–¥–æ –±–µ–∂–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –µ—â—ë, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏ –∫–æ–º–∞–Ω–¥—É`)
                    .setColor('Red')
                ],
                components: []
            });
        });
    }
};